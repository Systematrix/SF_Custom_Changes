"Data Import Template"
"Table:","Custom Script"
""
""
"Notes:"
"Please do not change the template headings."
"First data column must be blank."
"If you are uploading new records, leave the ""name"" (ID) column blank."
"If you are uploading new records, ""Naming Series"" becomes mandatory, if present."
"Only mandatory fields are necessary for new records. You can delete non-mandatory columns if you wish."
"For updating, you can update only selective columns."
"You can only upload upto 5000 records in one go. (may be less in some cases)"
""
"DocType:","Custom Script","",""
"Column Labels:","ID","DocType","Script"
"Column Name:","name","dt","script"
"Mandatory:","Yes","No","No"
"Type:","Data (text)","Link","Code"
"Info:","","Valid DocType",""
"Start entering data below this line"
"","""Custom Bank Reconciliation-Client""","Custom Bank Reconciliation","cur_frm.cscript.bank_account = function(doc,dt,dn) {
	if(doc.bank_account) {
		return frappe.call({
			method: ""erpnext.accounts.utils.get_balance_on"",
			args: {account: doc.bank_account, date: doc.from_date},
			callback: function(r) {
				doc.system_balance = r.message;
                                doc.total_amount = 0.0;
                                doc.total_reconciled_debit = 0.0;
                                doc.total_reconciled_credit = 0.0;
                                doc.amounts_not_reflected_in_bank = 0.0;
                                doc.amounts_not_reflected_in_system = 0.0;
				refresh_field('system_balance');
				refresh_field('total_amount');
				refresh_field('total_reconciled_debit');
				refresh_field('total_reconciled_credit');
				refresh_field('amounts_not_reflected_in_bank');
				refresh_field('amounts_not_reflected_in_system');
			}
		});
	}
}"
"","""Purchase Receipt-Client""","Purchase Receipt","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.add_fetch('batch_no','warehouse_lot_id','warehouse_lot_id');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('supplier','credit_days','credit_days');
frappe.ui.form.on('Purchase Receipt', 'onload', function(frm){
    if(frm.doc.supplier){
    if (!frm.doc.prevdoc_docname && (frm.doc.items || frm.doc.purchase_receipt_details).length && (frm.doc.items || frm.doc.purchase_receipt_details)[0].prevdoc_docname){
    frappe.model.set_value('Purchase Receipt', frm.doc.name, 'prevdoc_docname', (frm.doc.items || frm.doc.purchase_receipt_details)[0].prevdoc_docname); 
   }
}
});
cur_frm.communication_view = new frappe.views.CommunicationList({
                list: frappe.get_list(""Communication"", {""parent"": cur_frm.doc.name, ""parenttype"": ""Purchase Receipt""}),
                parent: cur_frm.fields_dict.communication_html.wrapper,
                doc: cur_frm.doc,
                recipients: cur_frm.doc.contact_email
            });"
"","""Purchase Order-Client""","Purchase Order","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('supplier','credit_days','credit_days')
frappe.ui.form.on(""Purchase Order"", ""credit_days"", function(frm) {
    var nos = frm.doc.credit_days* 1;
    var ddate = frappe.datetime.add_days(frm.doc.transaction_date,nos);
    cur_frm.set_value(""due_date"", ddate);
});
cur_frm.communication_view = new frappe.views.CommunicationList({
                list: frappe.get_list(""Communication"", {""parent"": cur_frm.doc.name, ""parenttype"": ""Purchase Order""}),
                parent: cur_frm.fields_dict.communication_html.wrapper,
                doc: cur_frm.doc,
                recipients: cur_frm.doc.contact_email
            });"
"","""Delivery Note-Client""","Delivery Note","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.add_fetch('batch_no','warehouse_lot_id','warehouse_lot_id');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('customer','credit_days','credit_days');
cur_frm.communication_view = new frappe.views.CommunicationList({
                list: frappe.get_list(""Communication"", {""parent"": cur_frm.doc.name, ""parenttype"": ""Delivery Note""}),
                parent: cur_frm.fields_dict.communication_html.wrapper,
                doc: cur_frm.doc,
                recipients: cur_frm.doc.contact_email
            });"
"","""Purchase Invoice-Client""","Purchase Invoice","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('supplier','credit_days','credit_days');
frappe.ui.form.on(""Purchase Invoice"", ""credit_days"", function(frm) {
    var nos = frm.doc.credit_days* 1;
    var ddate = frappe.datetime.add_days(frm.doc.posting_date,nos);
    cur_frm.set_value(""due_date"", ddate);
});
frappe.ui.form.on(""Purchase Invoice"", ""posting_date"", function(frm) {
    var nos = frm.doc.credit_days* 1;
    var ddate = frappe.datetime.add_days(frm.doc.posting_date,nos);
    cur_frm.set_value(""due_date"", ddate);
});"
"","""Quotation-Client""","Quotation","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
}"
"","""Sales Order-Client""","Sales Order","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('customer','credit_days','credit_days')"
"","""Stock Entry-Client""","Stock Entry","cur_frm.add_fetch('batch_no','warehouse_lot_id','warehouse_lot_id');"
"","""Journal Voucher-Client""","Journal Voucher","cur_frm.cscript.address_name=function() {
	erpnext.utils.get_address_display(this.frm, ""address_name"", ""address"");
};"
"","""Sales Invoice-Client""","Sales Invoice","cur_frm.add_fetch('item_code','net_weight','net_weight');
cur_frm.add_fetch('item_code','weight_uom','weight_uom');
cur_frm.cscript.quantity_in_weight = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var qty = item.net_weight ? flt(item.quantity_in_weight) / flt(item.net_weight) : 0.0;
    frappe.model.set_value(cdt, cdn, ""qty"", qty);
};
cur_frm.cscript.rate_per_weight_unit = function(doc, cdt, cdn) {
    var item = frappe.get_doc(cdt, cdn);
    var rate = item.rate_per_weight_unit * item.quantity_in_weight / item.qty;
    frappe.model.set_value(cdt, cdn, ""rate"", rate);
};
cur_frm.add_fetch('customer','credit_days','credit_days');
frappe.ui.form.on(""Sales Invoice"", ""credit_days"", function(frm) {
    var nos = frm.doc.credit_days* 1;
    var ddate = frappe.datetime.add_days(frm.doc.posting_date,nos);
    cur_frm.set_value(""due_date"", ddate);
});
frappe.ui.form.on(""Sales Invoice"", ""posting_date"", function(frm) {
    var nos = frm.doc.credit_days* 1;
    var ddate = frappe.datetime.add_days(frm.doc.posting_date,nos);
    cur_frm.set_value(""due_date"", ddate);
});
frappe.ui.form.on(""Sales Invoice"", ""payments_made"", function(frm) {
    if (frm.doc.payments_made > frm.doc.total_commission){
         cur_frm.set_value(""sp_outstanding_amount"", 0);
         cur_frm.set_value(""payments_made"", 0);
         msgprint(""Please check total commission."");
    } 
    else if(frm.doc.payments_made <= frm.doc.total_commission) {
        var comm = frm.doc.total_commission - frm.doc.payments_made;
        cur_frm.set_value(""sp_outstanding_amount"", comm);
    }
});
frappe.ui.form.on(""Sales Invoice"", ""validate"", function(frm) {
   if(frm.doc.entries){
   for(i=0;i<frm.doc.entries.length;i++){
        frm.doc.entries[i].batch_copy = frm.doc.entries[i].batch_no;
    }}
});
cur_frm.communication_view = new frappe.views.CommunicationList({
                list: frappe.get_list(""Communication"", {""parent"": cur_frm.doc.name, ""parenttype"": ""Sales Invoice""}),
                parent: cur_frm.fields_dict.communication_html.wrapper,
                doc: cur_frm.doc,
                recipients: cur_frm.doc.contact_email
            });"
